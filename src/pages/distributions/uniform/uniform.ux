<template>
  <div class="container">
    <div class="top-bar">
      <text class="title">均匀分布</text>
    </div>

    <div class="content">
      <div class="param-section">
        <div class="param-item">
          <text class="param-label">下限 a</text>
          <input class="param-input" type="number" @change="updateA" value="{{ a }}" />
        </div>
        
        <div class="param-item">
          <text class="param-label">上限 b</text>
          <input class="param-input" type="number" @change="updateB" value="{{ b }}" />
        </div>
        
        <div class="param-item">
          <text class="param-label">计算值 x</text>
          <input class="param-input" type="number" @change="updateX" value="{{ x }}" />
        </div>
      </div>

      <div class="calc-section">
        <div class="calc-btn" onclick="calculate">
          <text class="calc-text">计算</text>
        </div>
      </div>

      <div class="error-message" if="{{ errorMessage }}">
        <text class="error-text">{{ errorMessage }}</text>
      </div>
    </div>

    <div class="bottom-section">
      <div class="back-btn" onclick="goBack">
        <text class="back-text">返回</text>
      </div>
    </div>
  </div>
</template>

<script>
import router from "@system.router"
import { NativeBridge } from "../../../common/native_bridge"

export default {
  private: {
    a: 0,
    b: 1,
    x: 0.5,
    pmf: "-",
    cdf: "-",
    hasResult: false,
    errorMessage: ""
  },

  onInit() {
    this.$page.setTitleBar({ text: '均匀分布' })
  },

  goBack() {
    router.back()
  },

  updateA(e) {
    this.a = parseFloat(e.value) || 0
    this.hasResult = false
    this.errorMessage = ""
  },

  updateB(e) {
    this.b = parseFloat(e.value) || 1
    this.hasResult = false
    this.errorMessage = ""
  },

  updateX(e) {
    this.x = parseFloat(e.value) || 0
    this.hasResult = false
    this.errorMessage = ""
  },

  calculate() {
    // Validate input parameters
    if (this.a >= this.b) {
      this.errorMessage = "下限必须小于上限"
      return
    }

    // Use optimized C calculation
    const result = NativeBridge.calculateUniformDistribution(this.a, this.b, this.x)
    
    if (result.success) {
      router.push({
        uri: 'pages/detail_continuous',
        params: {
          distributionName: '均匀分布',
          pdfValue: result.pdfResult.toFixed(6),
          cdfValue: result.cdfResult.toFixed(6),
          inputParams: [
            { key: '下限 a', value: this.a },
            { key: '上限 b', value: this.b },
            { key: '计算值 x', value: this.x }
          ]
        }
      })
      this.hasResult = true
      this.errorMessage = ""
    } else {
      this.errorMessage = result.errorMessage || "计算失败"
      this.hasResult = false
    }
  }
}
</script>

<style>
.container {
  flex-direction: column;
  background-color: #000000;
  height: 100%;
}

.top-bar {
  height: 60px;
  background-color: #111111;
  flex-direction: row;
  align-items: center;
  padding: 0 20px;
  border-bottom: 1px solid #333333;
  justify-content: center;
}

.title {
  font-size: 20px;
  color: #ffffff;
  font-weight: bold;
}

.bottom-section {
  padding: 0px 20px 50px 20px;
}

.back-btn {
  height: 45px;
  width: 100%;
  background-color: #333333;
  border-radius: 10px;
  justify-content: center;
  align-items: center;
  border: 1px solid #555555;
}

.back-text {
  font-size: 18px;
  color: #ffffff;
  font-weight: bold;
}

.content {
  flex: 1;
  flex-direction: column;
  padding: 30px 15px;
}

.param-section {
  flex-direction: column;
  margin-bottom: 20px;
}

.param-item {
  height: 65px;
  background-color: #1a1a1a;
  border-radius: 8px;
  padding: 0 15px;
  margin-bottom: 10px;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  border: 1px solid #333333;
}

.param-label {
  font-size: 18px;
  color: #ffffff;
  font-weight: 500;
}

.param-input {
  width: 65px;
  height: 35px;
  background-color: #333333;
  border: 1px solid #555555;
  border-radius: 6px;
  color: #ffffff;
  text-align: center;
  font-size: 18px;
  padding: 0 5px;
}

.calc-section {
  margin-bottom: 10px;
}

.calc-btn {
  height: 45px;
  width: 100%;
  background-color: #0066cc;
  border-radius: 10px;
  justify-content: center;
  align-items: center;
}

.calc-text {
  font-size: 18px;
  color: #ffffff;
  font-weight: bold;
}


.error-message {
  margin-bottom: 15px;
  padding: 10px;
  background-color: #2d1f1f;
  border: 1px solid #cc4444;
  border-radius: 8px;
}

.error-text {
  font-size: 12px;
  color: #ff6666;
  text-align: center;
}
</style>