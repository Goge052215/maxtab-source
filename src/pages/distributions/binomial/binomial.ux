<import name="input-method" src="../../../components/InputMethod/InputMethod.ux"></import>

<template>
  <div class="container">
    <div class="top-bar">
      <text class="title">二项分布</text>
    </div>

    <div class="content">
      <div class="param-section">
        <div class="param-item" @click="selectInput('n')">
          <text class="param-label">试验次数 n</text>
          <div class="param-display">
            <text class="param-value">{{ n }}</text>
          </div>
        </div>
        
        <div class="param-item" @click="selectInput('p')">
          <text class="param-label">成功概率 p</text>
          <div class="param-display">
            <text class="param-value">{{ p }}</text>
          </div>
        </div>
        
        <div class="param-item" @click="selectInput('k')">
          <text class="param-label">计算值 k</text>
          <div class="param-display">
            <text class="param-value">{{ k }}</text>
          </div>
        </div>
      </div>

      <div class="calc-section">
        <div class="calc-btn" onclick="calculate">
          <text class="calc-text">计算</text>
        </div>
      </div>

      <div class="error-message" if="{{ errorMessage }}">
        <text class="error-text">{{ errorMessage }}</text>
      </div>

      <!-- Input Status Display -->
      <div class="input-status" if="{{ showKeyboard }}">
        <text class="status-text">正在输入: {{ currentParamName }}</text>
        <text class="status-value">当前值: {{ inputBuffer }}</text>
      </div>

      <!-- Keyboard Backdrop -->
      <div class="keyboard-backdrop" if="{{ showKeyboard }}" onclick="onVisibilityChange({detail: {visible: false}})"></div>

      <!-- VelaOS Input Method Container -->
      <div class="keyboard-container" if="{{ showKeyboard }}">
        <input-method 
          hide="{{ !showKeyboard }}"
          keyboardtype="numbers"
          maxlength="10"
          vibratemode="short"
          screentype="circle"
          @visibility-change="onVisibilityChange"
          @key-down="onKeyDown"
          @delete="onDelete"
          @complete="onComplete">
        </input-method>
      </div>
    </div>

    <div class="bottom-section">
      <div class="back-btn" onclick="goBack">
        <text class="back-text">返回</text>
      </div>
    </div>


  </div>
</template>

<script>
import router from "@system.router"
import { NativeBridge } from "../../../common/native_bridge"
import { globalState } from "../../../common/global_state.js"

export default {
  private: {
    n: 10,
    p: 0.5,
    k: 5,
    pmf: "-",
    cdf: "-",
    hasResult: false,
    errorMessage: "",
    showKeyboard: false,
    currentParam: '',
    currentParamName: '',
    inputBuffer: ''
  },

  onInit() {
    this.$page.setTitleBar({ text: '二项分布' })
    this.importFromCalculator()
  },

  onShow() {
    console.log('Binomial onShow called')
    this.importFromCalculator()
  },

  goBack() {
    router.back()
  },

  importFromCalculator() {
    const payload = globalState.getCalculatorExport()
    if (!payload) return

    const { distributionType, paramValues, inputValue } = payload

    // Only import if this is binomial distribution data
    if (distributionType === 'binomial' && Array.isArray(paramValues)) {
      if (paramValues.length >= 2) {
        this.n = paramValues[0] || 10
        this.p = paramValues[1] || 0.5
      }
      if (typeof inputValue !== 'undefined') {
        this.k = inputValue || 0
      }
      
      console.log('Imported from calculator:', { n: this.n, p: this.p, k: this.k })
      this.$forceUpdate()
    }
  },

  selectInput(inputType) {
    let parameterName = ''
    if (inputType === 'n') parameterName = '试验次数'
    else if (inputType === 'p') parameterName = '成功概率'
    else if (inputType === 'k') parameterName = '计算值'
    
    this.currentParam = inputType
    this.currentParamName = parameterName
    this.inputBuffer = this[inputType].toString()
    this.showKeyboard = true
    this.$forceUpdate()
  },

  onVisibilityChange(evt) {
    console.log("键盘显示状态变更:", JSON.stringify(evt))
    if (!evt.detail.visible) {
      this.showKeyboard = false
      this.inputBuffer = ''
      this.currentParam = ''
      this.currentParamName = ''
      this.$forceUpdate()
    }
  },

  onKeyDown(evt) {
    console.log("按下按键:", JSON.stringify(evt))
    // Key down events are handled by the component
  },

  onDelete() {
    if (this.inputBuffer.length > 0) {
      this.inputBuffer = this.inputBuffer.slice(0, -1)
      if (this.inputBuffer === '') {
        this.inputBuffer = '0'
      }
    }
    this.$forceUpdate()
    console.log("删除字符, 当前值:", this.inputBuffer)
  },

  onComplete(evt) {
    const char = evt.detail.content
    console.log("输入字符:", JSON.stringify(evt))
    
    // Handle decimal point validation
    if (char === '.' && this.inputBuffer.indexOf('.') !== -1) {
      return // Don't allow multiple decimal points
    }
    
    // Handle input
    if (this.inputBuffer === '0' && char !== '.') {
      this.inputBuffer = char
    } else {
      this.inputBuffer += char
    }
    
    this.$forceUpdate()
    
    // Auto-confirm when user finishes input (you can modify this logic)
    if (this.inputBuffer.length > 0) {
      setTimeout(() => {
        this.confirmInput()
      }, 1000) // Auto-confirm after 1 second of no input
    }
  },

  confirmInput() {
    if (!this.inputBuffer || this.inputBuffer === '') return
    
    const value = parseFloat(this.inputBuffer) || 0
    
    // Update the parameter value
    if (this.currentParam === 'n' || this.currentParam === 'k') {
      this[this.currentParam] = parseInt(this.inputBuffer) || 0
    } else if (this.currentParam === 'p') {
      this[this.currentParam] = value
    }
    
    // Validate bounds
    if (this.currentParam === 'n' && this.n <= 0) this.n = 1
    if (this.currentParam === 'p') {
      if (this.p < 0) this.p = 0
      if (this.p > 1) this.p = 1
    }
    if (this.currentParam === 'k' && this.k < 0) this.k = 0
    
    this.hasResult = false
    this.errorMessage = ""
    this.showKeyboard = false
    this.inputBuffer = ''
    this.currentParam = ''
    this.currentParamName = ''
    
    this.$forceUpdate()
  },



  calculate() {
    // Validate input parameters
    if (this.n <= 0) {
      this.errorMessage = "试验次数必须大于0"
      return
    }
    
    if (this.p < 0 || this.p > 1) {
      this.errorMessage = "成功概率必须在0-1之间"
      return
    }
    
    if (this.k < 0 || this.k > this.n) {
      this.errorMessage = "计算值k必须在0到n之间"
      return
    }

    // Use optimized C calculation
    const result = NativeBridge.calculateBinomial(this.n, this.p, this.k)
    
    if (result.success) {
      router.push({
        uri: 'pages/detail_discrete',
        params: {
          distributionName: '二项分布',
          pmfValue: result.pdfResult.toFixed(6),
          cdfValue: result.cdfResult.toFixed(6),
          inputParams: [
            { key: '试验次数 n', value: this.n },
            { key: '成功概率 p', value: this.p },
            { key: '计算值 k', value: this.k }
          ]
        }
      })
      this.hasResult = true
      this.errorMessage = ""
    } else {
      this.errorMessage = result.errorMessage || "计算失败"
      this.hasResult = false
    }
  }
}
</script>

<style>
.container {
  flex-direction: column;
  background-color: #000000;
  height: 100%;
}

.top-bar {
  height: 60px;
  background-color: #111111;
  flex-direction: row;
  align-items: center;
  padding: 0 20px;
  border-bottom: 1px solid #333333;
  justify-content: center;
}

.title {
  font-size: 20px;
  color: #ffffff;
  font-weight: bold;
}

.bottom-section {
  padding: 0px 20px 50px 20px;
}

.back-btn {
  height: 45px;
  width: 100%;
  background-color: #333333;
  border-radius: 10px;
  justify-content: center;
  align-items: center;
  border: 1px solid #555555;
}

.back-text {
  font-size: 18px;
  color: #ffffff;
  font-weight: bold;
}

.content {
  flex: 1;
  flex-direction: column;
  padding: 30px 15px;
}

.param-section {
  flex-direction: column;
  margin-bottom: 20px;
}

.param-item {
  height: 65px;
  background-color: #1a1a1a;
  border-radius: 8px;
  padding: 0 15px;
  margin-bottom: 10px;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  border: 1px solid #333333;
}

.param-label {
  font-size: 18px;
  color: #ffffff;
  font-weight: 500;
}

.param-display {
  width: 65px;
  height: 35px;
  background-color: #333333;
  border: 1px solid #555555;
  border-radius: 6px;
  justify-content: center;
  align-items: center;
}

.param-value {
  color: #ffffff;
  text-align: center;
  font-size: 18px;
}

.calc-section {
  margin-bottom: 10px;
}

.calc-btn {
  height: 45px;
  width: 100%;
  background-color: #0066cc;
  border-radius: 10px;
  justify-content: center;
  align-items: center;
}

.calc-text {
  font-size: 18px;
  color: #ffffff;
  font-weight: bold;
}


.error-message {
  margin-bottom: 15px;
  padding: 10px;
  background-color: #2d1f1f;
  border: 1px solid #cc4444;
  border-radius: 8px;
}

.error-text {
  font-size: 12px;
  color: #ff6666;
  text-align: center;
}

.input-status {
  background-color: #1a1a1a;
  border: 1px solid #333333;
  border-radius: 8px;
  padding: 15px;
  margin-top: 15px;
  flex-direction: column;
  align-items: center;
}

.status-text {
  font-size: 14px;
  color: #ffffff;
  margin-bottom: 5px;
}

.status-value {
  font-size: 18px;
  color: #00ff00;
  font-weight: bold;
}

.keyboard-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.6);
  z-index: 999;
}

.keyboard-container {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 30vh;
  z-index: 1000;
  background-color: rgba(26, 26, 26, 0.98);
  border-top: 3px solid #444444;
  border-top-left-radius: 20px;
  border-top-right-radius: 20px;
  overflow: visible;
}


</style>