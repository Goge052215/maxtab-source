<template>
  <div class="container">
    <div class="top-bar">
      <text class="title">二项分布</text>
    </div>

    <div class="content">
      <div class="param-section">
        <div class="param-item" @click="selectInput('n')">
          <text class="param-label">试验次数 n</text>
          <div class="param-display">
            <text class="param-value">{{ n }}</text>
          </div>
        </div>
        
        <div class="param-item" @click="selectInput('p')">
          <text class="param-label">成功概率 p</text>
          <div class="param-display">
            <text class="param-value">{{ p }}</text>
          </div>
        </div>
        
        <div class="param-item" @click="selectInput('k')">
          <text class="param-label">计算值 k</text>
          <div class="param-display">
            <text class="param-value">{{ k }}</text>
          </div>
        </div>
      </div>

      <div class="calc-section">
        <div class="calc-btn" onclick="calculate">
          <text class="calc-text">计算</text>
        </div>
      </div>

      <div class="error-message" if="{{ errorMessage }}">
        <text class="error-text">{{ errorMessage }}</text>
      </div>
    </div>

    <div class="bottom-section">
      <div class="back-btn" onclick="goBack">
        <text class="back-text">返回</text>
      </div>
    </div>


  </div>
</template>

<script>
import router from "@system.router"
import { NativeBridge } from "../../../common/native_bridge"
import { globalState } from "../../../common/global_state.js"

export default {
  private: {
    n: 10,
    p: 0.5,
    k: 5,
    pmf: "-",
    cdf: "-",
    hasResult: false,
    errorMessage: ""
  },

  onInit() {
    this.$page.setTitleBar({ text: '二项分布' })
  },

  onShow() {
    // Handle return from keyboard page using VelaOS protocol
    console.log('Binomial onShow called')
    this.handleKeyboardResult()
  },

  onReady() {
    // Also handle on ready in case onShow doesn't fire
    console.log('Binomial onReady called')
    this.handleKeyboardResult()
  },

  onResume() {
    // Handle when page becomes active again
    console.log('Binomial onResume called')
    this.handleKeyboardResult()
  },

  handleKeyboardResult() {
    // Check for keyboard result multiple times to ensure we catch it
    setTimeout(() => {
      this.checkKeyboardResult()
    }, 100)
    
    setTimeout(() => {
      this.checkKeyboardResult()
    }, 300)
    
    setTimeout(() => {
      this.checkKeyboardResult()
    }, 500)
  },

  checkKeyboardResult() {
    const result = globalState.getKeyboardResult()
    if (result) {
      const { value, parameterType, forceBack } = result
      
      console.log('Binomial received result:', result) // Debug log
      
      // Update the parameter value
      if (parameterType === 'n' || parameterType === 'k') {
        this[parameterType] = parseInt(value) || 0
      } else if (parameterType === 'p') {
        this[parameterType] = parseFloat(value) || 0
      }
      
      // Validate bounds
      if (parameterType === 'n' && this.n <= 0) this.n = 1
      if (parameterType === 'p') {
        if (this.p < 0) this.p = 0
        if (this.p > 1) this.p = 1
      }
      if (parameterType === 'k' && this.k < 0) this.k = 0
      
      console.log('Updated values:', { n: this.n, p: this.p, k: this.k })
      
      this.hasResult = false
      this.errorMessage = ""
      
      // Force UI update
      this.$forceUpdate()

      if (forceBack) {
        router.back()
      }
      
      return true // Found and processed result
    }
    return false // No result found
  },

  goBack() {
    router.back()
  },

  selectInput(inputType) {
    let parameterName = ''
    if (inputType === 'n') parameterName = '试验次数'
    else if (inputType === 'p') parameterName = '成功概率'
    else if (inputType === 'k') parameterName = '计算值'
    
    router.push({
      uri: 'pages/keyboard',
      params: {
        parameterName: parameterName,
        parameterType: inputType,
        currentValue: this[inputType].toString(),
        forceBack: true
      }
    })
  },



  calculate() {
    // Validate input parameters
    if (this.n <= 0) {
      this.errorMessage = "试验次数必须大于0"
      return
    }
    
    if (this.p < 0 || this.p > 1) {
      this.errorMessage = "成功概率必须在0-1之间"
      return
    }
    
    if (this.k < 0 || this.k > this.n) {
      this.errorMessage = "计算值k必须在0到n之间"
      return
    }

    // Use optimized C calculation
    const result = NativeBridge.calculateBinomial(this.n, this.p, this.k)
    
    if (result.success) {
      router.push({
        uri: 'pages/detail_discrete',
        params: {
          distributionName: '二项分布',
          pmfValue: result.pdfResult.toFixed(6),
          cdfValue: result.cdfResult.toFixed(6),
          inputParams: [
            { key: '试验次数 n', value: this.n },
            { key: '成功概率 p', value: this.p },
            { key: '计算值 k', value: this.k }
          ]
        }
      })
      this.hasResult = true
      this.errorMessage = ""
    } else {
      this.errorMessage = result.errorMessage || "计算失败"
      this.hasResult = false
    }
  }
}
</script>

<style>
.container {
  flex-direction: column;
  background-color: #000000;
  height: 100%;
}

.top-bar {
  height: 60px;
  background-color: #111111;
  flex-direction: row;
  align-items: center;
  padding: 0 20px;
  border-bottom: 1px solid #333333;
  justify-content: center;
}

.title {
  font-size: 20px;
  color: #ffffff;
  font-weight: bold;
}

.bottom-section {
  padding: 0px 20px 50px 20px;
}

.back-btn {
  height: 45px;
  width: 100%;
  background-color: #333333;
  border-radius: 10px;
  justify-content: center;
  align-items: center;
  border: 1px solid #555555;
}

.back-text {
  font-size: 18px;
  color: #ffffff;
  font-weight: bold;
}

.content {
  flex: 1;
  flex-direction: column;
  padding: 30px 15px;
}

.param-section {
  flex-direction: column;
  margin-bottom: 20px;
}

.param-item {
  height: 65px;
  background-color: #1a1a1a;
  border-radius: 8px;
  padding: 0 15px;
  margin-bottom: 10px;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  border: 1px solid #333333;
}

.param-label {
  font-size: 18px;
  color: #ffffff;
  font-weight: 500;
}

.param-display {
  width: 65px;
  height: 35px;
  background-color: #333333;
  border: 1px solid #555555;
  border-radius: 6px;
  justify-content: center;
  align-items: center;
}

.param-value {
  color: #ffffff;
  text-align: center;
  font-size: 18px;
}

.calc-section {
  margin-bottom: 10px;
}

.calc-btn {
  height: 45px;
  width: 100%;
  background-color: #0066cc;
  border-radius: 10px;
  justify-content: center;
  align-items: center;
}

.calc-text {
  font-size: 18px;
  color: #ffffff;
  font-weight: bold;
}


.error-message {
  margin-bottom: 15px;
  padding: 10px;
  background-color: #2d1f1f;
  border: 1px solid #cc4444;
  border-radius: 8px;
}

.error-text {
  font-size: 12px;
  color: #ff6666;
  text-align: center;
}
</style>