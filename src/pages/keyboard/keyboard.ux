<template>
  <div class="container">
    <!-- Input Display -->
    <div class="input-section">
      <text class="input-value">{{ inputValue || '0' }}</text>
    </div>

    <!-- Control Buttons -->
    <div class="control-section">
      <div class="control-btn cancel-btn" @click="onCancel">
        <text class="control-text">取消</text>
      </div>
      <div class="control-btn confirm-btn" @click="onConfirm">
        <text class="control-text">确定</text>
      </div>
    </div>

    <!-- Keyboard -->
    <div class="keyboard-section">
      <div class="key-row">
        <div class="key" @click="onKeyPress('1')">
          <text class="key-text">1</text>
        </div>
        <div class="key" @click="onKeyPress('2')">
          <text class="key-text">2</text>
        </div>
        <div class="key" @click="onKeyPress('3')">
          <text class="key-text">3</text>
        </div>
      </div>
      
      <div class="key-row">
        <div class="key" @click="onKeyPress('4')">
          <text class="key-text">4</text>
        </div>
        <div class="key" @click="onKeyPress('5')">
          <text class="key-text">5</text>
        </div>
        <div class="key" @click="onKeyPress('6')">
          <text class="key-text">6</text>
        </div>
      </div>
      
      <div class="key-row">
        <div class="key" @click="onKeyPress('7')">
          <text class="key-text">7</text>
        </div>
        <div class="key" @click="onKeyPress('8')">
          <text class="key-text">8</text>
        </div>
        <div class="key" @click="onKeyPress('9')">
          <text class="key-text">9</text>
        </div>
      </div>
      
      <!-- Bottom row with special keys -->
      <div class="key-row">
        <div class="key" @click="onKeyPress('.')">
          <text class="key-text">.</text>
        </div>
        <div class="key" @click="onKeyPress('0')">
          <text class="key-text">0</text>
        </div>
        <div class="key delete-key" @click="onDelete">
          <text class="key-text">←</text>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import router from "@system.router"
import vibrator from "@system.vibrator"
import { globalState } from "../../common/global_state.js"

export default {
  private: {
    inputValue: "",
    parameterName: "",
    parameterType: "",
    vibrateMode: "short",
    forceBack: false
  },

  onInit() {
    // Get parameters from the previous page
    this.parameterName = this.$page.getParam('parameterName') || ''
    this.parameterType = this.$page.getParam('parameterType') || ''
    this.inputValue = this.$page.getParam('currentValue') || ''
    this.forceBack = !!this.$page.getParam('forceBack')
    
    console.log('Keyboard onInit - params:', {
      parameterName: this.parameterName,
      parameterType: this.parameterType,
      currentValue: this.inputValue,
      forceBack: this.forceBack
    })
    
    this.$page.setTitleBar({ text: `输入${this.parameterName}` })
  },

  onReady() {
    // Ensure parameters are loaded
    if (!this.parameterName) {
      this.parameterName = this.$page.getParam('parameterName') || ''
      this.parameterType = this.$page.getParam('parameterType') || ''
      this.inputValue = this.$page.getParam('currentValue') || ''
    }
  },

  onKeyPress(key) {
    this.vibrate()
    
    // Prevent multiple decimal points
    if (key === '.' && this.inputValue.includes('.')) {
      return
    }
    
    // Handle first character
    if (this.inputValue === '' || this.inputValue === '0') {
      if (key === '.') {
        this.inputValue = '0.'
      } else {
        this.inputValue = key
      }
    } else {
      this.inputValue += key
    }
  },

  onDelete() {
    this.vibrate()
    if (this.inputValue.length > 0) {
      this.inputValue = this.inputValue.slice(0, -1)
    }
  },

  onCancel() {
    this.vibrate()
    router.back()
  },

  onConfirm() {
    this.vibrate()
    
    // Validate input
    let value = this.inputValue
    if (!value || value === '') {
      value = '0'
    }
    
    // Convert to appropriate type
    const numericValue = this.parameterType === 'n' || this.parameterType === 'k' 
      ? parseInt(value) || 0 
      : parseFloat(value) || 0
    
    console.log('Keyboard onConfirm - storing result:', {
      value: numericValue,
      parameterType: this.parameterType,
      inputValue: this.inputValue
    })
    
    // Store result in global state with retry mechanism
    const result = {
      value: numericValue,
      parameterType: this.parameterType,
      forceBack: this.forceBack
    }
    
    globalState.setKeyboardResult(result)
    
    // Store multiple times to ensure it's captured
    setTimeout(() => {
      globalState.setKeyboardResult(result)
    }, 50)
    
    setTimeout(() => {
      globalState.setKeyboardResult(result)
    }, 100)
    
    // Go back to previous page
    router.back()
  },

  vibrate() {
    if (this.vibrateMode) {
      vibrator.vibrate({ mode: this.vibrateMode })
    }
  }
}
</script>

<style>
.container {
  flex-direction: column;
  background-color: #000000;
  height: 100%;
  padding: 15px;
  justify-content: flex-start;
}

.input-section {
  height: 60px;
  background-color: #1a1a1a;
  justify-content: center;
  align-items: center;
  margin-bottom: 10px;
  border-radius: 8px;
  border: 2px solid #333333;
  margin-top: 35px;
}

.input-value {
  font-size: 24px;
  color: #0066cc;
  font-weight: bold;
  text-align: center;
}

.control-section {
  flex-direction: row;
  justify-content: space-between;
  margin-bottom: 15px;
}

.control-btn {
  height: 50px;
  width: 90px;
  border-radius: 12px;
  justify-content: center;
  align-items: center;
}

.cancel-btn {
  background-color: #666666;
  border: 2px solid #777777;
}

.confirm-btn {
  background-color: #0066cc;
  border: 2px solid #0088ff;
}

.control-text {
  font-size: 20px;
  color: #ffffff;
  font-weight: bold;
}

.keyboard-section {
  flex-direction: column;
  justify-content: center;
  align-items: center;
  flex: 1;
}

.key-row {
  flex-direction: row;
  justify-content: space-between;
  margin-bottom: 10px;
  width: 100%;
  max-width: 200px;
}

.key {
  width: 57px;
  height: 57px;
  background-color: #333333;
  border-radius: 27px;
  justify-content: center;
  align-items: center;
  border: 2px solid #555555;
}

.delete-key {
  background-color: #cc4444;
  border: 2px solid #dd5555;
}

.key-text {
  font-size: 24px;
  color: #ffffff;
  font-weight: bold;
  text-align: center;
}
</style>