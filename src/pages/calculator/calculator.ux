<template>
  <div class="container">
    <!-- 顶部导航栏 -->
    <div class="top-bar">
      <text class="back-button" onclick="goBack">返回</text>
      <text class="page-title">快速计算</text>
    </div>

    <!-- 主内容区域 -->
    <div class="content">
      <!-- 分布类别选择 -->
      <div class="section">
        <text class="section-title">选择分布类别</text>
        <div class="category-tabs">
          <div class="category-tab {{ currentCategory === 'discrete' ? 'active' : '' }}" onclick="selectCategory('discrete')">
            <text class="tab-text">离散分布</text>
          </div>
          <div class="category-tab {{ currentCategory === 'continuous' ? 'active' : '' }}" onclick="selectCategory('continuous')">
            <text class="tab-text">连续分布</text>
          </div>
        </div>
      </div>

      <!-- 具体分布选择 -->
      <div class="section">
        <text class="section-title">选择具体分布</text>
        <div class="distribution-grid">
          <div class="distribution-cell {{ selectedDistribution === dist.type ? 'selected' : '' }}" 
               for="{{ dist in distributions }}" 
               onclick="selectDistribution(dist.type)">
            <text class="dist-name">{{ dist.name }}</text>
            <text class="dist-formula">{{ dist.formula }}</text>
          </div>
        </div>
      </div>

      <!-- 参数输入 -->
      <div class="section" if="selectedDistribution">
        <text class="section-title">参数设置</text>
        <div class="parameters-card">
          <div class="param-row" for="{{ param in parameters }}" @click="selectInput('parameter', $idx)">
            <text class="param-name">{{ param.name }}:</text>
            <div class="param-display">
              <text class="param-value">{{ param.value % 1 === 0 ? param.value.toString() : param.value.toFixed(2) }}</text>
            </div>
          </div>
        </div>
      </div>

      <!-- 计算区域 -->
      <div class="section" if="parameters.length > 0">
        <text class="section-title">计算</text>
        <div class="calculation-panel">
          <div class="input-group" @click="selectInput('input')">
            <text class="input-label">输入值:</text>
            <div class="input-controls">
              <div class="input-box">
                <text class="param-value">{{ inputValue }}</text>
              </div>
              <div class="input-buttons">
                <div class="input-btn" onclick="decrementInput"><text class="input-btn-text">-</text></div>
                <div class="input-btn" onclick="incrementInput"><text class="input-btn-text">+</text></div>
              </div>
            </div>
          </div>

          <div class="results-display">
            <div class="result-box">
              <text class="result-label">概率密度:</text>
              <text class="result-value {{ currentCategory === 'discrete' ? 'pmf' : 'pdf' }}">{{ currentCategory === 'discrete' ? pmfResult : pdfResult }}</text>
            </div>
            <div class="result-box">
              <text class="result-label">累积概率:</text>
              <text class="result-value cdf">{{ cdfResult }}</text>
            </div>
          </div>

          <div class="calculate-btn" onclick="calculate">
            <text class="btn-text">立即计算</text>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import router from "@system.router"
import { globalState } from "../../common/global_state.js"

export default {
  private: {
    currentCategory: 'discrete',
    selectedDistribution: null,
    parameters: [],
    inputValue: 0,
    pdfResult: "-",
    pmfResult: "-",
    cdfResult: "-",
    discreteDistributions: [
      { type: 'binomial', name: '二项分布', formula: 'Bin(n, p)' },
      { type: 'poisson', name: '泊松分布', formula: 'Poi(λ)' },
      { type: 'geometric', name: '几何分布', formula: 'Geo(p)' },
      { type: 'negative_binomial', name: '负二项分布', formula: 'NB(r, p)' },
      { type: 'hypergeometric', name: '超几何分布', formula: 'HG(N, K, n)' }
    ],
    continuousDistributions: [
      { type: 'normal', name: '正态分布', formula: 'N(μ, σ²)' },
      { type: 'exponential', name: '指数分布', formula: 'Exp(λ)' },
      { type: 'uniform', name: '均匀分布', formula: 'U(a, b)' },
      { type: 'gamma', name: '伽马分布', formula: 'Γ(α, β)' },
      { type: 'beta', name: '贝塔分布', formula: 'Beta(α, β)' }
    ],
    errorMessage: ""
  },

  onInit() {
    this.$page.setTitleBar({ text: '快速计算' })
    this.selectCategory('discrete')
    this.importFromGlobal()
  },

  onShow() {
    console.log('Calculator onShow called')
    this.handleKeyboardResult()
    this.importFromGlobal()
  },

  onReady() {
    console.log('Calculator onReady called')
    this.handleKeyboardResult()
    this.importFromGlobal()
  },

  onResume() {
    console.log('Calculator onResume called')
    this.handleKeyboardResult()
  },

  goBack() {
    // Export current values back for the source page to pick up
    this.exportToGlobal()
    router.back()
  },

  selectCategory(category) {
    this.currentCategory = category
    this.selectedDistribution = null
    this.parameters = []
  },

  selectDistribution(type) {
    this.selectedDistribution = type
    this.setupParameters(type)
  },

  setupParameters(type) {
    const paramMap = {
      binomial: [
        { name: '试验次数 n', value: 10, min: 1, max: 100 },
        { name: '成功概率 p', value: 0.5, min: 0.01, max: 0.99 }
      ],
      poisson: [
        { name: '参数 λ', value: 3.0, min: 0.1, max: 50 }
      ],
      geometric: [
        { name: '成功概率 p', value: 0.3, min: 0.01, max: 0.99 }
      ],
      negative_binomial: [
        { name: '成功次数 r', value: 5, min: 1, max: 50 },
        { name: '成功概率 p', value: 0.5, min: 0.01, max: 0.99 }
      ],
      hypergeometric: [
        { name: '总体大小 N', value: 50, min: 10, max: 1000 },
        { name: '成功项数 K', value: 20, min: 1, max: 50 },
        { name: '抽取数量 n', value: 10, min: 1, max: 50 }
      ],
      normal: [
        { name: '均值 μ', value: 0.0, min: -100, max: 100 },
        { name: '标准差 σ', value: 1.0, min: 0.01, max: 50 }
      ],
      exponential: [
        { name: '率参数 λ', value: 1.0, min: 0.01, max: 10 }
      ],
      uniform: [
        { name: '下限 a', value: 0.0, min: -100, max: 100 },
        { name: '上限 b', value: 1.0, min: -100, max: 100 }
      ],
      gamma: [
        { name: '形状参数 α', value: 2.0, min: 0.1, max: 50 },
        { name: '率参数 β', value: 1.0, min: 0.01, max: 10 }
      ],
      beta: [
        { name: '形状参数 α', value: 2.0, min: 0.1, max: 50 },
        { name: '形状参数 β', value: 2.0, min: 0.1, max: 50 }
      ]
    }
    this.parameters = paramMap[type] || []
  },

  incrementInput() {
    this.inputValue = parseFloat((this.inputValue + 0.1).toFixed(2))
    this.$forceUpdate()
  },

  decrementInput() {
    this.inputValue = parseFloat(Math.max(0, this.inputValue - 0.1).toFixed(2))
    this.$forceUpdate()
  },

  calculate() {
    if (this.parameters.length === 0) return
    
    // 模拟计算结果
    const randomResult = () => (Math.random() * 0.8 + 0.1).toFixed(4)
    
    if (this.currentCategory === 'discrete') {
      this.pmfResult = randomResult()
      this.pdfResult = "-"
    } else {
      this.pdfResult = randomResult()
      this.pmfResult = "-"
    }
    this.cdfResult = randomResult()
  },

  selectInput(inputType, index = -1) {
    let parameterName = ''
    let parameterType = ''
    let currentValue = ''

    if (inputType === 'parameter') {
      parameterName = this.parameters[index].name
      parameterType = `param_${index}`
      currentValue = this.parameters[index].value.toString()
    } else {
      parameterName = '输入值'
      parameterType = 'input'
      currentValue = this.inputValue.toString()
    }

    router.push({
      uri: 'pages/keyboard',
      params: {
        parameterName: parameterName,
        parameterType: parameterType,
        currentValue: currentValue
      }
    })
  },

  handleKeyboardResult() {
    const result = globalState.getKeyboardResult()
    if (result) {
      const { value, parameterType } = result

      if (parameterType.startsWith('param_')) {
        const index = parseInt(parameterType.split('_')[1])
        if (!isNaN(index) && index >= 0 && index < this.parameters.length) {
          this.parameters[index].value = value
        }
      } else if (parameterType === 'input') {
        this.inputValue = value
      }
      
      this.$forceUpdate()
    }
  },

  importFromGlobal() {
    const payload = globalState.getCalculatorImport()
    if (!payload) return

    const { distributionType, paramValues, inputValue } = payload

    // Set category by distribution type
    const discreteTypes = ['binomial', 'poisson', 'geometric', 'negative_binomial', 'hypergeometric']
    const isDiscrete = discreteTypes.indexOf(distributionType) !== -1
    this.currentCategory = isDiscrete ? 'discrete' : 'continuous'
    this.selectedDistribution = distributionType
    this.setupParameters(distributionType)

    if (Array.isArray(paramValues)) {
      for (let i = 0; i < Math.min(paramValues.length, this.parameters.length); i++) {
        this.parameters[i].value = paramValues[i]
      }
    }
    if (typeof inputValue !== 'undefined') {
      this.inputValue = inputValue
    }
    // Clear import so it is not re-applied
    globalState.clearCalculatorImport()
    this.$forceUpdate()
  },

  exportToGlobal() {
    const payload = {
      distributionType: this.selectedDistribution,
      paramValues: this.parameters.map(p => p.value),
      inputValue: this.inputValue
    }
    globalState.setCalculatorExport(payload)
  },

  computed: {
    distributions() {
      return this.currentCategory === 'discrete' 
        ? this.discreteDistributions 
        : this.continuousDistributions
    }
  }
}
</script>

<style>
.container {
  flex-direction: column;
  background-color: #000000;
  height: 100%;
}

.top-bar {
  height: 70px;
  background-color: #111111;
  flex-direction: row;
  align-items: center;
  padding: 0 20px;
  border-bottom: 1px solid #333333;
}

.back-button {
  font-size: 16px;
  color: #ffffff;
  padding: 10px 15px;
}

.page-title {
  font-size: 20px;
  color: #ffffff;
  font-weight: bold;
  margin-left: 20px;
}

.content {
  flex: 1;
  flex-direction: column;
  padding: 20px;
}

.section {
  margin-bottom: 25px;
}

.section-title {
  font-size: 18px;
  color: #ffffff;
  font-weight: bold;
  margin-bottom: 15px;
}

.category-tabs {
  flex-direction: row;
  justify-content: center;
  margin-bottom: 15px;
}

.category-tab {
  height: 40px;
  background-color: #222222;
  border: 1px solid #444444;
  border-radius: 20px;
  padding: 0 20px;
  margin: 0 10px;
  justify-content: center;
  align-items: center;
}

.category-tab.active {
  background-color: #0066cc;
  border-color: #0088ff;
}

.tab-text {
  font-size: 14px;
  color: #ffffff;
}

.distribution-grid {
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
}

.distribution-cell {
  width: 48%;
  height: 70px;
  background-color: #222222;
  border: 1px solid #444444;
  border-radius: 10px;
  margin-bottom: 10px;
  padding: 10px;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.distribution-cell.selected {
  background-color: #0066cc;
  border-color: #0088ff;
}

.dist-name {
  font-size: 14px;
  color: #ffffff;
  font-weight: bold;
}

.dist-formula {
  font-size: 12px;
  color: #cccccc;
  margin-top: 2px;
}

.parameters-card {
  background-color: #222222;
  border: 1px solid #444444;
  border-radius: 10px;
  padding: 15px;
}

.param-row {
  height: 40px;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 10px;
}

.param-name {
  font-size: 14px;
  color: #ffffff;
  width: 80px;
}

.param-value {
  font-size: 14px;
  color: #00ff00;
  text-align: center;
}

.param-display {
  width: 120px;
  height: 35px;
  background-color: #333333;
  border: 1px solid #555555;
  border-radius: 6px;
  justify-content: center;
  align-items: center;
}

.calculation-panel {
  background-color: #222222;
  border: 1px solid #444444;
  border-radius: 10px;
  padding: 20px;
}

.input-group {
  height: 50px;
  flex-direction: row;
  align-items: center;
  margin-bottom: 20px;
}

.input-label {
  font-size: 16px;
  color: #ffffff;
  margin-right: 15px;
}

.input-controls {
  flex: 1;
  flex-direction: row;
  align-items: center;
}

.input-box {
  width: 100px;
  height: 35px;
  background-color: #333333;
  border: 1px solid #555555;
  border-radius: 5px;
  justify-content: center;
  align-items: center;
}

.input-buttons {
  flex-direction: row;
  margin-left: 10px;
}

.input-btn {
  width: 30px;
  height: 30px;
  background-color: #444444;
  border: 1px solid #666666;
  border-radius: 5px;
  margin: 0 2px;
  justify-content: center;
  align-items: center;
}

.input-btn-text {
  font-size: 18px;
  color: #ffffff;
  font-weight: bold;
}

.results-display {
  flex-direction: column;
}

.result-box {
  height: 45px;
  background-color: #333333;
  border: 1px solid #555555;
  border-radius: 8px;
  padding: 0 15px;
  margin-bottom: 10px;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
}

.result-label {
  font-size: 14px;
  color: #ffffff;
}

.result-value {
  font-size: 16px;
  font-weight: bold;
}

.result-value.pmf {
  color: #00ff00;
}

.result-value.pdf {
  color: #00ff00;
}

.result-value.cdf {
  color: #ffaa00;
}

.calculate-btn {
  height: 50px;
  background-color: #0066cc;
  border: none;
  border-radius: 10px;
  margin-top: 20px;
  justify-content: center;
  align-items: center;
}

.btn-text {
  font-size: 16px;
  color: #ffffff;
  font-weight: bold;
}
</style>